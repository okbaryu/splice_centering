#!/bin/bash
#
# pack/pack
# (c) Copyright 2013
# Allwinner Technology Co., Ltd. <www.allwinnertech.com>
# James Deng <csjamesdeng@allwinnertech.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

if [ $(basename `pwd`) != "pack" ] ; then
    echo "Please run at the top directory of pack"
    exit 1
fi

function pack_error()
{
    echo -e "\033[47;31mERROR: $*\033[0m"
}

function pack_warn()
{
    echo -e "\033[47;34mWARN: $*\033[0m"
}

function pack_info()
{
    echo -e "\033[47;30mINFO: $*\033[0m"
}

. ../../buildroot/scripts/shflags/shflags

# define option, format:
#   'long option' 'default value' 'help message' 'short option'
DEFINE_string 'chip' '' 'chip to build, e.g. sun7i' 'c'
DEFINE_string 'platform' '' 'platform to build, e.g. linux, android, camdroid' 'p'
DEFINE_string 'board' '' 'board to build, e.g. evb' 'b'
DEFINE_string 'debug_mode' 'uart0' 'config debug mode, e.g. uart0, card0' 'd'
DEFINE_string 'signture' 'none' 'pack boot signture to do secure boot' 's'
DEFINE_string 'mode' 'normal' 'pack dump firmware' 'm'
DEFINE_string 'function' 'spinor' 'pack private firmware' 'f'
DEFINE_string 'type' '' 'distinguish android and aliyun img' 't'
DEFINE_string 'media' 'spinor' 'the boot media type, e.g. spinor, emmc' 'e'

# parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"


PACK_CHIP=${FLAGS_chip}
PACK_PLATFORM=${FLAGS_platform}
PACK_BOARD=${FLAGS_board}
PACK_DEBUG=${FLAGS_debug_mode}
PACK_SIG=${FLAGS_signture}
PACK_MODE=${FLAGS_mode}
PACK_FUNC=${FLAGS_function}
PACK_TYPE=${FLAGS_type}
PACK_MEDIA=${FLAGS_media}

ROOT_DIR=`pwd`
TOOLS_DIR="${ROOT_DIR}/pctools/linux"
LICHEE_OUT="../../out/${PACK_CHIP}/${PACK_PLATFORM}/${PACK_BOARD}"

OTA_TEST_NAME="ota_test"
echo "${LICHEE_OUT}"
if [ -d ${LICHEE_OUT} ] ; then
	LICHEE_OUT=`cd ${LICHEE_OUT}; pwd`
else
	pack_error "build lichee before you pack"
	exit 1
fi

export PATH=${TOOLS_DIR}/mod_update:${TOOLS_DIR}/openssl:${TOOLS_DIR}/eDragonEx:${TOOLS_DIR}/fsbuild200:${TOOLS_DIR}/android:$PATH

tools_file_list=(
common/tools/split_xxxx.fex
chips/${PACK_CHIP}/tools/split_xxxx.fex
common/tools/usbtool_test.fex
chips/${PACK_CHIP}/tools/usbtool_test.fex
common/tools/cardscript.fex
common/tools/cardscript_secure.fex
chips/${PACK_CHIP}/tools/cardscript.fex
chips/${PACK_CHIP}/tools/cardscript_secure.fex
common/tools/cardtool.fex
chips/${PACK_CHIP}/tools/cardtool.fex
common/tools/usbtool.fex
chips/${PACK_CHIP}/tools/usbtool.fex
common/tools/aultls32.fex
chips/${PACK_CHIP}/tools/aultls32.fex
common/tools/aultools.fex
chips/${PACK_CHIP}/tools/aultools.fex
)

configs_file_list=(
common/toc/toc1.fex
common/toc/toc0.fex
common/imagecfg/image_linux.cfg
common/partition/sys_partition_dump.fex
common/partition/sys_partition_private.fex
common/partition/sys_partition_dragonboard.fex
common/partition/sys_partition_linux.fex
chips/${PACK_CHIP}/configs/default/*
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.fex
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.cfg
)

boot_resource_list=(
chips/${PACK_CHIP}/boot-resource/boot-resource:out/
chips/${PACK_CHIP}/boot-resource/boot-resource.ini:out/
chips/${PACK_CHIP}/configs/${PACK_BOARD}/bootlogo.bmp:out/boot-resource/
)

boot_file_list=(
chips/${PACK_CHIP}/bin/boot0_nand_${PACK_CHIP}.bin:out/boot0_nand.fex
chips/${PACK_CHIP}/bin/boot0_sdcard_${PACK_CHIP}.bin:out/boot0_sdcard.fex
chips/${PACK_CHIP}/bin/boot0_spinor_${PACK_CHIP}.bin:out/boot0_spinor.fex
chips/${PACK_CHIP}/bin/boot0_spinand_${PACK_CHIP}.bin:out/boot0_spinand.fex
chips/${PACK_CHIP}/bin/fes1_${PACK_CHIP}.bin:out/fes1.fex
chips/${PACK_CHIP}/bin/u-boot-${PACK_CHIP}.bin:out/u-boot.fex
chips/${PACK_CHIP}/bin/u-boot-spinor-${PACK_CHIP}.bin:out/u-boot-spinor.fex
chips/${PACK_CHIP}/bin/boot0_nand_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/boot0_nand-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/boot0_sdcard_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/boot0_sdcard-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/boot0_spinor_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/boot0_spinor-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/u-boot-${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/u-boot-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/u-boot-spinor-${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/u-boot-spinor-${OTA_TEST_NAME}.fex
)

mul_config_file_list=(
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.fex
)

boot_file_secure=(
chips/${PACK_CHIP}/bin/semelis_${PACK_CHIP}.bin:out/semelis.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}.bin:out/sboot.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/sboot-${OTA_TEST_NAME}.bin
)

function show_boards()
{
	printf "\nAll avaiable chips, platforms and boards:\n\n"
	printf "Chip            Board\n"
	for chipdir in $(find chips/ -mindepth 1 -maxdepth 1 -type d) ; do
		chip=`basename ${chipdir}`
		printf "${chip}\n"
		for boarddir in $(find chips/${chip}/configs/${platform} \
			-mindepth 1 -maxdepth 1 -type d) ; do
			board=`basename ${boarddir}`
			printf "                ${board}\n"
		done
	done
	printf "\nFor Usage:\n"
	printf "     $(basename $0) -h\n\n"
}

function uart_switch()
{
	cp $TOOLS_DIR/awk_debug_card0 out/awk_debug_card0
	TX=`awk  '$0~"'$PACK_CHIP'"{print $2}' pctools/linux/card_debug_pin`
	RX=`awk  '$0~"'$PACK_CHIP'"{print $3}' pctools/linux/card_debug_pin`
	PORT=`awk  '$0~"'$PACK_CHIP'"{print $4}' pctools/linux/card_debug_pin`
	MS=`awk  '$0~"'$PACK_CHIP'"{print $5}' pctools/linux/card_debug_pin`
	CK=`awk  '$0~"'$PACK_CHIP'"{print $6}' pctools/linux/card_debug_pin`
	DO=`awk  '$0~"'$PACK_CHIP'"{print $7}' pctools/linux/card_debug_pin`
	DI=`awk  '$0~"'$PACK_CHIP'"{print $8}' pctools/linux/card_debug_pin`

	sed -i s'/jtag_ms = /jtag_ms = '$MS'/g' out/awk_debug_card0
	sed -i s'/jtag_ck = /jtag_ck = '$CK'/g' out/awk_debug_card0
	sed -i s'/jtag_do = /jtag_do = '$DO'/g' out/awk_debug_card0
	sed -i s'/jtag_di = /jtag_di = '$DI'/g' out/awk_debug_card0
	sed -i s'/uart_debug_port =/uart_debug_port = '$PORT'/g' out/awk_debug_card0
	sed -i s'/uart_debug_tx =/uart_debug_tx = '$TX'/g' out/awk_debug_card0
	sed -i s'/uart_debug_rx =/uart_debug_rx = '$RX'/g' out/awk_debug_card0
	sed -i s'/uart_tx =/uart_tx = '$TX'/g' out/awk_debug_card0
	sed -i s'/uart_rx =/uart_rx = '$RX'/g' out/awk_debug_card0
	awk -f out/awk_debug_card0 out/sys_config.fex > out/a.fex
	rm out/sys_config.fex
	mv out/a.fex out/sys_config.fex
	echo "uart -> card0"
}

function copy_ota_test_file()
{
	printf "ota test bootloader by diff bootlogo\n"
	rm out/boot-resource/bootlogo.bmp
	mv out/boot-resource/bootlogo_ota_test.bmp out/boot-resource/bootlogo.bmp

	printf "copying ota test boot file\n"
	if [ -f sys_partition_nor.fex -o \
	-f sys_partition_nor_${PACK_PLATFORM}.fex ];  then
		rm -rf out/boot0_spinor.fex
		rm -rf out/u-boot-spinor.fex
		mv out/boot0_spinor-${OTA_TEST_NAME}.fex	out/boot0_spinor.fex
		mv out/u-boot-spinor-${OTA_TEST_NAME}.fex	out/u-boot-spinor.fex
	else
		rm -rf out/boot0_nand.fex
		rm -rf out/boot0_sdcard.fex
		rm  out/u-boot.fex
		mv out/boot0_nand-${OTA_TEST_NAME}.fex		out/boot0_nand.fex
		mv out/boot0_sdcard-${OTA_TEST_NAME}.fex	out/boot0_sdcard.fex
		mv out/u-boot-${OTA_TEST_NAME}.fex		out/u-boot.fex
	fi

	if [ "x${PACK_SIG}" = "xsecure" ] ; then
		printf "copying ota test secure boot file\n"
		rm -rf out/sboot.bin
		mv out/sboot-${OTA_TEST_NAME}.bin out/sboot.bin
	fi

	printf "ota test env by bootdelay(10) and logolevel(8)\n"
	sed -i 's/\(logolevel=\).*/\18/' out/env.cfg
	sed -i 's/\(bootdelay=\).*/\110/' out/env.cfg
}

function do_prepare()
{
	if [ -z "${PACK_CHIP}" -o -z "${PACK_PLATFORM}" -o -z "${PACK_BOARD}" ] ; then
		pack_error "invalid chip, platform or board."
		show_boards
		exit 1
	fi

	if [ ! -d chips/${PACK_CHIP}/configs/${PACK_BOARD} ] ; then
		pack_error "board dir or path do not exist."
		show_boards
		exit 1
	fi

	# Cleanup
	rm -rf out/
	mkdir -p out/
	mkdir -p out/${PACK_BOARD}/

	printf "pack: copying tools file\n"
	for file in ${tools_file_list[@]} ; do
		cp -f $file out/ 2> /dev/null
	done

	printf "pack: copying configs file\n"
	for file in ${configs_file_list[@]} ; do
		cp -f $file out/ 2> /dev/null
	done
	  
	printf "copying multiple configs file\n"
	for file in ${mul_config_file_list[@]} ; do
		cp -f $file out/${PACK_BOARD}
	done
	rm -rf out/${PACK_BOARD}/sys_partition.fex
	rm -rf out/${PACK_BOARD}/test_config.fex
	rm -rf out/${PACK_BOARD}/sys_config.fex	

	printf "pack: copying boot resource\n"
	for file in ${boot_resource_list[@]} ; do
		cp -rf `echo $file | awk -F: '{print $1}'` \
			`echo $file | awk -F: '{print $2}'` 2>/dev/null
	done

	printf "pack: copying boot file\n"
	for file in ${boot_file_list[@]} ; do
		cp -f `echo $file | awk -F: '{print $1}'` \
			`echo $file | awk -F: '{print $2}'` 2>/dev/null
	done

	if [ "x${PACK_SIG}" = "xsecure" ] ; then
		printf "pack: copying secure boot file\n"
		for file in ${boot_file_secure[@]} ; do
			cp -f `echo $file | awk -F: '{print $1}'` \
				`echo $file | awk -F: '{print $2}'` 2>/dev/null
		done
	fi

	if [ "x${PACK_PLATFORM}" = "xlinux" -a -f out/sys_partition_linux.fex \
		-a "x${PACK_FUNC}" != "xprvt" -a "x${PACK_MODE}" != "xdump" ] ; then
		mv out/image_linux.cfg out/image.cfg
		mv out/sys_partition_linux.fex out/sys_partition.fex
		mv out/sys_config_linux.fex out/sys_config.fex
	elif [ "x${PACK_PLATFORM}" = "xdragonboard" -a -f out/sys_partition_dragonboard.fex ] ; then
		mv out/sys_partition_dragonboard.fex out/sys_partition.fex
		mv out/sys_config_linux.fex out/sys_config.fex
	fi

	if [ "x${PACK_MODE}" = "xota_test" ] ; then
		printf "copy ota test file\n"
		copy_ota_test_file
	fi

	# Here, we can switch uart to card or normal
	if [ "x${PACK_DEBUG}" = "xcard0" -a "x${PACK_MODE}" != "xdump" \
		-a "x${PACK_FUNC}" != "xprvt" ] ; then \
		uart_switch
	fi

	sed -i 's/\\boot-resource/\/boot-resource/g' out/boot-resource.ini
	sed -i 's/\\\\/\//g' out/image.cfg
	sed -i 's/^imagename/;imagename/g' out/image.cfg

	if [ "x${PACK_TYPE}" = "xaliyun" ]; then
		IMG_NAME="${PACK_CHIP}_${PACK_TYPE}_${PACK_BOARD}_${PACK_DEBUG}"
	else
		IMG_NAME="${PACK_CHIP}_${PACK_PLATFORM}_${PACK_BOARD}_${PACK_DEBUG}"
	fi

	if [ "x${PACK_SIG}" != "xnone" ]; then
		IMG_NAME="${IMG_NAME}_${PACK_SIG}"
	fi

	if [ "x${PACK_MODE}" = "xdump" -o "x${PACK_MODE}" = "xota_test" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_MODE}"
	fi

	if [ "x${PACK_FUNC}" = "xprvt" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_FUNC}"
	fi

	if [ "x${PACK_FUNC}" = "xprev_refurbish" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_FUNC}"
	fi
	
	IMG_NAME="${IMG_NAME}.img"

	echo "imagename = $IMG_NAME" >> out/image.cfg
	echo "" >> out/image.cfg

	if [ "x${PACK_FUNC}" = "xspinor" ]; then
		if [ -f  chips/$PACK_CHIP/configs/${PACK_BOARD}/boot-resource/logo/boot_logo.JPG ] ; then
			cp -v chips/$PACK_CHIP/configs/${PACK_BOARD}/boot-resource/logo/boot_logo.JPG out/boot_logo.fex 2>/dev/null
			cp -v chips/$PACK_CHIP/configs/${PACK_BOARD}/boot-resource/logo/shutdown_logo.JPG out/shutdown_logo.fex 2>/dev/null
		else
			cp -v chips/$PACK_CHIP/boot-resource/boot-resource/logo/boot_logo.JPG out/boot_logo.fex 2>/dev/null
			cp -v chips/$PACK_CHIP/boot-resource/boot-resource/logo/shutdown_logo.JPG out/shutdown_logo.fex 2>/dev/null
		fi

		cp -rf chips/$PACK_CHIP/configs/${PACK_BOARD}/sys_partition_nor_${PACK_PLATFORM}.fex out/sys_partition.fex 2>/dev/null
	fi
}

function do_common()
{
	cd out/

	busybox unix2dos sys_config.fex
	busybox unix2dos sys_partition.fex
	script sys_config.fex > /dev/null
	script sys_partition.fex > /dev/null
	cp sys_config.bin config.fex

	if [ "x${PACK_PLATFORM}" = "xdragonboard" ] ; then
		busybox dos2unix test_config.fex
		cp test_config.fex boot-resource/
		busybox unix2dos test_config.fex
		script test_config.fex > /dev/null
		cp test_config.bin boot-resource/

		#use env_dragon.cfg
		rm -f env.cfg
		mv env_dragon.cfg env.cfg
	fi

	# Those files for SpiNor. We will try to find sys_partition_nor.fex
	if [ -f sys_partition_nor.fex -o \
		 -f sys_partition_nor_${PACK_PLATFORM}.fex ]; then

		mv -f sys_partition_nor_${PACK_PLATFORM}.fex \
			sys_partition_nor.fex >/dev/null 2>&1

		# Here, will create sys_partition_nor.bin
		busybox unix2dos sys_partition_nor.fex
		script  sys_partition_nor.fex > /dev/null
		update_boot0 boot0_spinor.fex   sys_config.bin SPINOR_FLASH > /dev/null
		update_uboot u-boot-spinor.fex  sys_config.bin >/dev/null
	fi

	# Those files for Nand or Card
	update_boot0 boot0_nand.fex     sys_config.bin NAND > /dev/null
	update_boot0 boot0_spinand.fex  sys_config.bin SDMMC_CARD > /dev/null
	update_boot0 boot0_sdcard.fex   sys_config.bin SDMMC_CARD > /dev/null
	update_uboot u-boot.fex         sys_config.bin > /dev/null
	update_fes1  fes1.fex           sys_config.bin > /dev/null

	update_uboot_v2 u-boot.fex	sys_config.bin ${PACK_BOARD}
	local ret=`echo $?`
	if [ $ret != "0" -a $ret != "1" ] ; then
		pack_error "update_uboot_v2 failed"
		exit 1
	elif [ $ret = "1" ] ; then
		echo "no used multi config"
	else
		echo "used multi config"
	fi

	if [ "x${PACK_FUNC}" = "xspinor" -a "x${PACK_MEDIA}" = "xspinor" ]; then
	    update_mbr sys_partition.bin 1 > /dev/null
    else
	    update_mbr sys_partition.bin 4 > /dev/null
    fi
	# get the boot-resource.fex
	fsbuild boot-resource.ini split_xxxx.fex > /dev/null

	if [ "x${PACK_FUNC}" = "xprvt" ] ; then
		u_boot_env_gen env_burn.cfg env.fex > /dev/null
	else
		if [ "xsun8iw8p1" = "x${PACK_CHIP}" ]; then
		    sunxi_env_gen env.cfg env.fex > /dev/null
		else
			u_boot_env_gen env.cfg env.fex > /dev/null
		fi
	fi

	ln -s $LICHEE_OUT/arisc arisc.fex
}

function do_finish()
{
	if [ -e ${IMG_NAME} ]; then
        mv ${IMG_NAME} ../${IMG_NAME}
        echo '----------image is at----------'
        echo -e '\033[0;31;1m'
        echo ${ROOT_DIR}/${IMG_NAME}
        echo -e '\033[0m'
    fi

	cd ..
	printf "pack: finished\n"
}

function do_signature()
{
	printf "prepare for signature by openssl\n"
    if [ "x${PACK_FUNC}" = "xprev_refurbish" ] ; then
        cp -v ../common/sign_config/dragon_toc_no_secureos.cfg dragon_toc.cfg
    else
	    if [ "x${PACK_PLATFORM}" = "xlinux" -o "x${PACK_PLATFORM}" = "xdragonboard" ] ; then
			cp -v ../common/sign_config/dragon_toc_linux.cfg dragon_toc.cfg
	    elif [ "x${PACK_PLATFORM}" = "xandroid" ] ; then
			cp -v ../common/sign_config/dragon_toc.cfg dragon_toc.cfg
        fi
	fi

	if [ $? -ne 0 ]
	then
		pack_error "dragon toc config file is not exist"
		exit 1
	fi

	rm -f cardscript.fex
	mv cardscript_secure.fex cardscript.fex
	if [ $? -ne 0 ]
	then
		pack_error "dragon cardscript_secure.fex file is not exist"
		exit 1
	fi

	dragonsecboot -toc0 dragon_toc.cfg ../common/keys  > /dev/null
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc0 run error"
		exit 1
	fi

	update_toc0  toc0.fex           sys_config.bin
	if [ $? -ne 0 ]
	then
		pack_error "update toc0 run error"
		exit 1
	fi

	dragonsecboot -toc1 dragon_toc.cfg ../common/keys ../common/sign_config/cnf_base.cnf > /dev/null
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc1 run error"
		exit 1
	fi

	echo "secure signature ok!"
}

function do_pack_android()
{
	printf "packing for android\n"

	if [ -z "${ANDROID_IMAGE_OUT}" ] ; then
		pack_error "please specify ANDROID_IMAGE_OUT env"
		exit 1
	fi

	if [ -f ${ANDROID_IMAGE_OUT}/verity_block.img ] ; then
		ln -s ${ANDROID_IMAGE_OUT}/verity_block.img verity_block.fex
	fi
	
	ln -s ${ANDROID_IMAGE_OUT}/boot.img boot.fex
	ln -s ${ANDROID_IMAGE_OUT}/system.img system.fex
	ln -s ${ANDROID_IMAGE_OUT}/recovery.img recovery.fex

	if [ -f ${ANDROID_IMAGE_OUT}/userdata.img ] ; then
		ln -s ${ANDROID_IMAGE_OUT}/userdata.img userdata.fex
	fi

	if [ "x${PACK_SIG}" = "xsig" ] ; then
		echo "signature sunxi mbr"
		signature sunxi_mbr.fex dlinfo.fex
		echo "signature over"
	elif [ "x${PACK_SIG}" = "xsecure" ] ; then
		do_signature
	else
		echo "normal"
	fi

	dragon image.cfg sys_partition.fex
}

function do_pack_camdroid()
{
	printf "packing for camdroid\n"

	if [ -z "${CAMLINUX_IMAGE_OUT}" ] ; then
		pack_error "please specify CAMLINUX_IMAGE_OUT env"
		exit 1
	fi
	

	ln -s ${CAMLINUX_IMAGE_OUT}/boot.img boot.fex
	ln -s ${CAMLINUX_IMAGE_OUT}/system.img rootfs.fex
	if [ -f sys_partition_nor.bin ]; then 
		mv -f sys_partition.bin         sys_partition.bin_back
		cp -f sys_partition_nor.bin     sys_partition.bin
		#update_mbr                      sys_partition.bin 4 > /dev/null

		merge_package full_img.fex      boot0_spinor.fex \
			u-boot-spinor.fex sunxi_mbr.fex sys_partition.bin

		mv -f sys_partition.bin_back    sys_partition.bin
	fi

	if [ ! -f full_img.fex ]; then
		echo "full_img.fex is empty" > full_img.fex
	fi

	dragon image.cfg sys_partition.fex
}

function do_pack_dragonboard()
{
	printf "packing for dragonboard\n"

	ln -s ${LICHEE_OUT}/boot.img boot.fex
	ln -s ${LICHEE_OUT}/rootfs.ext4 rootfs.fex

	if [ "x${PACK_SIG}" = "xsecure" ] ; then
			do_signature
	else
		echo "normal"
	fi

	dragon image.cfg sys_partition.fex
}

function do_pack_linux()
{
	printf "pack: packing for linux\n"

	ln -s ${LICHEE_OUT}/vmlinux.tar.bz2 vmlinux.fex
	ln -s ${LICHEE_OUT}/boot.img boot.fex
	if [ "x${PACK_MEDIA}" = "xspinand" -a -f ${LICHEE_OUT}/rootfs.ext4 ]; then
		printf " rootfs: ext4\n"
		ln -s ${LICHEE_OUT}/rootfs.ext4 rootfs.fex
	else
		printf " rootfs: squashfs\n"
		ln -s ${LICHEE_OUT}/rootfs.squashfs rootfs.fex
	fi
	if [ -f ${LICHEE_OUT}/system.ext4 ]; then
		ln -s ${LICHEE_OUT}/system.ext4 system.fex
	fi

	if [ "x${PACK_SIG}" = "xsecure" ] ; then
		do_signature
	else
		echo "normal"
	fi
	if [ "x${PACK_FUNC}" = "xspinor" ]; then
		merge_package full_img.fex boot0_spinor.fex u-boot-spinor.fex sunxi_mbr.fex sys_partition.bin
	fi

	dragon image.cfg sys_partition.fex
}

function do_pack_dump()
{
	busybox unix2dos sys_partition_dump.fex
	script sys_partition_dump.fex > /dev/null

	update_mbr sys_partition_dump.bin 4 > /dev/null

	dragon image.cfg sys_partition_dump.fex
}

function do_pack_prvt()
{
	busybox unix2dos sys_partition_private.fex
	script sys_partition_private.fex > /dev/null

	update_mbr sys_partition_private.bin 4 > /dev/null

	dragon image.cfg sys_partition_private.fex
}

do_prepare
do_common
if [ "x${PACK_MODE}" = "xdump" ] ; then
	do_pack_dump
elif [ "x${PACK_FUNC}" = "xprvt" ] ; then
	do_pack_prvt
else
	do_pack_${PACK_PLATFORM}
fi
do_finish
