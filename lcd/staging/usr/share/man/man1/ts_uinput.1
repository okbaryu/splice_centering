.TH "TS_UINPUT" "1" "" "" "tslib"
.SH "NAME"
ts_uinput \- A daemon program creating a tslib-filtered and calibrated input event device

.SH SYNOPSIS
\fBts_uinput\fR [OPTION]

.SH "DESCRIPTION"
.PP
.BR ts_uinput
provides an alternative for using tslib's API in order to get filtered and calibrated touch screen inputs.
Using Linux' uinput system, it
.BR "creates an input event device"
to be used in your environment.
It uses ts_read_mt() and thus supports single and multi touch.
.sp
.sp
\fB\-d, \-\-daemonize\fR
.sp
.RS 4
Start ts_uinput as a daemon and return. The sysfs' input device name of the newly created device is printed to stdout before returning.
.RE

.sp
\fB\-v, \-\-verbose\fR
.sp
.RS 4
Print debug information to stdout and stderr.
.RE

.sp
\fB\-n, \-\-name\fR
.sp
.RS 4
Set the name of the new input event device. Default: \fBts_uinput\fR.
.RE

.sp
\fB\-i, \-\-idev\fR
.sp
.RS 4
Explicitly choose the original input event device for tslib to use. Default: the environment variable \fBTSLIB_TSDEVICE\fR's value.
.RE

.sp
\fB\-f, \-\-fbdev\fR
.sp
.RS 4
Explicitly choose the framebuffer device to use. Default: the environment variable \fBTSLIB_FBDEVICE\fR's value.
.RE

.sp
\fB\-s, \-\-slots\fR
.sp
.RS 4
Explicitly set the possible concurrent touch contacts supported. May be only needed if the original input device doesn't report it.
.RE

.RE

.SH "SEE ALSO"
.PP
ts.conf (5),
ts_calibrate (1),
ts_test (1)
