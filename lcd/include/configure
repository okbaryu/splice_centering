#!/bin/bash

ROOT_PATH=$(cd "$(dirname "$0")"; pwd)

################################################################################
## files for configuration.
################################################################################
configFiles=("${ROOT_PATH}/config.h" "${ROOT_PATH}/CODEC/VIDEO/DECODER/vdecoder_config.h") 

################################################################################
## variables for configuration.
################################################################################
CONFIGURATIONS=(
    CONFIG_CC                                   nu
    CONFIG_OS                                   nu
    CONFIG_OS_VERSION                           nu
    CONFIG_MEMORY_DRIVER                        nu
    CONFIG_PRODUCT                              nu
    CONFIG_CHIP                                 nu
    CONFIG_DRAM_INTERFACE                       nu
    CONFIG_LOG_LEVEL                            nu
    CONFIG_VE_IPC                               nu
    CONFIG_ENABLE_DEMUX_ASF                     nu
    CONFIG_ENABLE_DEMUX_AVI                     nu
    CONFIG_ENABLE_DEMUX_BLUERAYDISK             nu
    CONFIG_ENABLE_DEMUX_MPEGDASH                nu
    CONFIG_ENABLE_DEMUX_FLV                     nu
    CONFIG_ENABLE_DEMUX_HLS                     nu
    CONFIG_ENABLE_DEMUX_MKV                     nu
    CONFIG_ENABLE_DEMUX_MMS                     nu
    CONFIG_ENABLE_DEMUX_MOV                     nu
    CONFIG_ENABLE_DEMUX_MPG                     nu
    CONFIG_ENABLE_DEMUX_PMP                     nu
    CONFIG_ENABLE_DEMUX_OGG                     nu
    CONFIG_ENABLE_DEMUX_RX                      nu
    CONFIG_ENABLE_DEMUX_TS                      nu
    CONFIG_ENABLE_VIDEO_DECODER_MJPEG           nu
    CONFIG_ENABLE_VIDEO_DECODER_MPEG1           nu
    CONFIG_ENABLE_VIDEO_DECODER_MPEG2           nu
    CONFIG_ENABLE_VIDEO_DECODER_MPEG4           nu
    CONFIG_ENABLE_VIDEO_DECODER_MSMPEG4V1       nu
    CONFIG_ENABLE_VIDEO_DECODER_MSMPEG4V2       nu
    CONFIG_ENABLE_VIDEO_DECODER_DIVX3           nu
    CONFIG_ENABLE_VIDEO_DECODER_DIVX4           nu
    CONFIG_ENABLE_VIDEO_DECODER_DIVX5           nu
    CONFIG_ENABLE_VIDEO_DECODER_XVID            nu
    CONFIG_ENABLE_VIDEO_DECODER_H263            nu
    CONFIG_ENABLE_VIDEO_DECODER_SORENSSON_H263  nu 
    CONFIG_ENABLE_VIDEO_DECODER_RXG2            nu
    CONFIG_ENABLE_VIDEO_DECODER_WMV1            nu
    CONFIG_ENABLE_VIDEO_DECODER_WMV2            nu
    CONFIG_ENABLE_VIDEO_DECODER_WMV3            nu
    CONFIG_ENABLE_VIDEO_DECODER_VP6             nu
    CONFIG_ENABLE_VIDEO_DECODER_VP8             nu
    CONFIG_ENABLE_VIDEO_DECODER_VP9             nu
    CONFIG_ENABLE_VIDEO_DECODER_RX              nu
    CONFIG_ENABLE_VIDEO_DECODER_H264	        nu
    CONFIG_ENABLE_VIDEO_DECODER_H265            nu
    CONFIG_CMCC                                 nu
    CONFIG_IS_CAMERA_DECODER					nu
)

################################################################################
## help message.
################################################################################
show_help()
{
    cat <<EOF
********************************************************************************
********************************************************************************
Usage:   configure [options]
Options: [read from configuration files if not specified]

Help options:

  --help                        print this message
  
  --show-config                 print the configurations

Standard options:

  --tool-chain=compile_tool_set the compile tool chain, option can be [gnueabihf/gnueabi], not used for android os.

  --os=target_os                the target os, option can be [android/linux].
  
  --os-version=version          target os version, for android os, option can be [4.2/4.4/5.0], not used for other os.
  
  --memory-driver=driver        which driver to use for allocating physical continue memory block, option can be [sunximem/ion].
  
  --product=product_type        the target product type, option can be [pad/tvbox/ott_cmcc/iptv/dvb].
  
  --chip=chip_code              the target chip, option can be [1623/1625/1633/1651/1650/1661/1667/1673/1639/1680/1681/1689].
  
  --dram-interface=ddr_type     DRAM interface, option can be [ddr1_16bits/ddr1_32bits/ddr2_16bits/ddr2_32bits/ddr3_16bits/ddr3_32bits/ddr3_64bits].
  
  --debug-level=level           log output level for debug, option can be [close/error/warning/default/detail].

  --ve-ipc=target_ipc           the ve_ipc enable or not, option can be [disable/enable].
  
  --disable-demux=demuxer       disable demux for specific file format, option can be [asf/avi/bd/dash/flv/hls/mkv/mms/mov/mpg/pmp/ogg/rx/ts].
  
  --enable-demux=demuxer        enable demux for specific file format, option can be [asf/avi/bd/dash/flv/hls/mkv/mms/mov/mpg/pmp/ogg/rx/ts].
  
  --disable-vdecoder=decoder    diable video decoder for specific codec format, 
                                option can be [mjpeg/mpeg1/mpeg2/mpeg4/msmpeg4v1/msmpeg4v2/divx3/divx4/divx5/xvid/h263/s263/rxg2/wmv1/wmv2/wmv3/vp6/vp8/vp9/rx/h264/h265].
  
  --enable-vdecoder=decoder     enable video decoder for specific codec format, 
                                option can be [mjpeg/mpeg1/mpeg2/mpeg4/msmpeg4v1/msmpeg4v2/divx3/divx4/divx5/xvid/h263/s263/rxg2/wmv1/wmv2/wmv3/vp6/vp8/vp9/rx/h264/h265].
  --cmcc=                       support cmcc or not [yes/no].
  --is_camera_decoder=          [yes/no], default [no]. If setting yes, libvdecoder.so only support h264 and jpeg.
                                
Note: This script read configurations from files, change configuration according to user command and write back to files.

********************************************************************************
********************************************************************************

EOF
  exit 0
}

################################################################################
## read configuration from files.
################################################################################
for myFile in ${configFiles[*]}
do
    if [ ! -f "$myFile" ]; then
        continue
    fi
    
    while read line
    do
        i=0
        key=""
        value=""
        
        ## abstract a configuration from one line.
        for element in $line
        do
            ## if the line is not start with "#define", it is not code for configuration, skip it.
            if [ $i -eq 0 ]; then
                if [ $element != "#define" ]; then
                    break;
                fi
            fi
            
            ## set key.
            if [ $i -eq 1 ]; then
                key=$element
            fi
            
            ## set value.
            if [ $i -eq 2 ]; then
                value=$element
            fi
            
            i=$((i+1))
            if [ $i -ge 3 ]; then
                break;
            fi
        done
        
        prefix="CONFIG_"
        prefix_length=${#prefix}
        if [ ${#value} -gt 0 ]; then
            if [ "${key:0:$prefix_length}" != "$prefix" ]; then
                continue
            fi
        else
            continue
        fi
        
        len=${#CONFIGURATIONS[*]}
        for ((j=0; j<len; j=j+2))
        do
            if [ $key = ${CONFIGURATIONS[$j]} ]; then
                CONFIGURATIONS[$((j+1))]=$value
                break;
            fi
        done
    done < $myFile
done


################################################################################
## process user commands.
################################################################################
for opt do
    optval="${opt#*=}"
    optval=$(echo $optval | tr "[A-Z]" "[a-z]")
    
    key=""
    value=""
    
    case "$opt" in
        ## show the help message.
        --help|-h) show_help
        ;;
        
        ## show the configurations read from file.
        --show-config)
            len=${#CONFIGURATIONS[*]}
            for((k=0; k<len; k+=2))
            do
                echo ${CONFIGURATIONS[$k]} = ${CONFIGURATIONS[$((k+1))]}
            done
        ;;
        
        ## config the compile tool chain, option can be [gnueabihf/gnueabi], not used for android os.
        --tool-chain=*)
            key=CONFIG_CC
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid tool chain option."
                continue
            fi
            
            if [ $optval = "gnueabihf" ]; then
                value=OPTION_CC_GNUEABIHF
            elif [ $optval = "gnueabi" ]; then
                value=OPTION_CC_GNUEABI
            else
                echo "invalid tool chain $optval."
                continue
            fi
        ;;
        
        ## config the target os, option can be [android/linux].
        --os=*)
            key=CONFIG_OS
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid os option."
                continue
            fi
            
            if [ $optval = "android" ]; then
                value=OPTION_OS_ANDROID
            elif [ $optval = "linux" ]; then
                value=OPTION_OS_LINUX
            else
                echo "invalid os option $optval."
                continue
            fi
        ;;
        
        ## config the target os version, for android os, option can be [4.2/4.4/5.0], not used for other os.
        --os-version=*)
            key=CONFIG_OS_VERSION
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid os version option."
                continue
            fi
            
            if [ $optval = "4.2" ]; then
                value=OPTION_OS_VERSION_ANDROID_4_2
            elif [ $optval = "4.4" ]; then
                value=OPTION_OS_VERSION_ANDROID_4_4
            elif [ $optval = "5.0" ]; then
                value=OPTION_OS_VERSION_ANDROID_5_0
            else
                echo "invalid os version option $optval."
                continue
            fi
        ;;
        
        ## config which driver to use for allocating physical continue memory block, option can be [sunximem/ion/ion_linux_3_10].
        --memory-driver=*)
            key=CONFIG_MEMORY_DRIVER
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid memory diriver option."
                continue
            fi
            
            if [ $optval = "sunximem" ]; then
                value=OPTION_MEMORY_DRIVER_SUNXIMEM
            elif [ $optval = "ion" ]; then
                value=OPTION_MEMORY_DRIVER_ION
            else
                echo "invalid memory diriver option $optval."
                continue
            fi
        ;;
        
        ## config the target product type, option can be [pad/tvbox/ott_cmcc/iptv/dvb].
        --product=*)
            key=CONFIG_PRODUCT
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid product option."
                continue
            fi
            
            if [ $optval = "pad" ]; then
                value=OPTION_PRODUCT_PAD
            elif [ $optval = "tvbox" ]; then
                value=OPTION_PRODUCT_TVBOX
            elif [ $optval = "ott_cmcc" ]; then
                value=OPTION_PRODUCT_OTT_CMCC
            elif [ $optval = "iptv" ]; then
                value=OPTION_PRODUCT_IPTV
            elif [ $optval = "dvb" ]; then
                value=OPTION_PRODUCT_DVB
            else
                echo "invalid product option $optval."
                continue
            fi
        ;;
        
        ## config the target chip, option can be [1623/1625/1651/1650/1661/1667/1673/1639/1680/1681/1689].
        --chip=*)
            key=CONFIG_CHIP
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid chip option."
                continue
            fi
            
            if [ $optval = "1623" ]; then
                value=OPTION_CHIP_1623
            elif [ $optval = "1625" ]; then
                value=OPTION_CHIP_1625
            elif [ $optval = "1633" ]; then
                value=OPTION_CHIP_1633
            elif [ $optval = "1651" ]; then
                value=OPTION_CHIP_1651
            elif [ $optval = "1650" ]; then
                value=OPTION_CHIP_1650
            elif [ $optval = "1661" ]; then
                value=OPTION_CHIP_1661
            elif [ $optval = "1667" ]; then
                value=OPTION_CHIP_1667
            elif [ $optval = "1639" ]; then
                value=OPTION_CHIP_1639
            elif [ $optval = "1673" ]; then
                value=OPTION_CHIP_1673
            elif [ $optval = "1680" ]; then
                value=OPTION_CHIP_1680
            elif [ $optval = "1681" ]; then
                value=OPTION_CHIP_1681
            elif [ $optval = "1689" ]; then
                value=OPTION_CHIP_1689
            else
                echo "invalid chip option $optval."
                continue
            fi
        ;;
        
        ## cofig DRAM interface, option can be [ddr1_16bits/ddr1_32bits/ddr2_16bits/ddr2_32bits/ddr3_16bits/ddr3_32bits/ddr3_64bits].
        --dram-interface=*)
            key=CONFIG_DRAM_INTERFACE
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid dram interface option."
                continue
            fi
            
            if [ $optval = "ddr1_16bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR1_16BITS
            elif [ $optval = "ddr1_32bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR1_32BITS
            elif [ $optval = "ddr2_16bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR2_16BITS
            elif [ $optval = "ddr2_32bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR2_32BITS
            elif [ $optval = "ddr3_16bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR3_16BITS
            elif [ $optval = "ddr3_32bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR3_32BITS
            elif [ $optval = "ddr3_64bits" ]; then
                value=OPTION_DRAM_INTERFACE_DDR3_64BITS
            else
                echo "invalid dram interface option $optval."
                continue
            fi
        ;;
        
        ## config log output level for debug, option can be [close/error/warning/default/detail].
        --debug-level=*)
            key=CONFIG_LOG_LEVEL
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid debug level option."
                continue
            fi
            
            if [ $optval = "close" ]; then
                value=OPTION_LOG_LEVEL_CLOSE
            elif [ $optval = "error" ]; then
                value=OPTION_LOG_LEVEL_ERROR
            elif [ $optval = "warning" ]; then
                value=OPTION_LOG_LEVEL_WARNING
            elif [ $optval = "default" ]; then
                value=OPTION_LOG_LEVEL_DEFAULT
            elif [ $optval = "detail" ]; then
                value=OPTION_LOG_LEVEL_DETAIL
            else
                echo "invalid debug level option $optval."
                continue
            fi
        ;;

        ## config ve_ipc, option can be [disable/enable].
        --ve-ipc=*)
            key=CONFIG_VE_IPC
            value=""
            
            if [ $optval = "disable" ]; then
                value=OPTION_VE_IPC_DISABLE
            elif [ $optval = "enable" ]; then
                value=OPTION_VE_IPC_ENABLE
            else
                echo "invalid ve_ipc option $optval."
                continue
            fi
        ;;
        
        ## disable or enable demux for specific file format, 
        ## option can be [asf/avi/bd/mpegdash/flv/hls/mkv/mms/mov/mpg/pmp/ogg/ts].
        --disable-demux=*|--enable-demux=*)
            key=""
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid demux format."
                continue
            fi
            
            if [ $optval = "asf" ]; then
                key=CONFIG_ENABLE_DEMUX_ASF
            elif [ $optval = "avi" ]; then
                key=CONFIG_ENABLE_DEMUX_AVI
            elif [ $optval = "bd" ]; then
                key=CONFIG_ENABLE_DEMUX_BLUERAYDISK
            elif [ $optval = "mpegdash" ]; then
                key=CONFIG_ENABLE_DEMUX_MPEGDASH
            elif [ $optval = "flv" ]; then
                key=CONFIG_ENABLE_DEMUX_FLV
            elif [ $optval = "hls" ]; then
                key=CONFIG_ENABLE_DEMUX_HLS
            elif [ $optval = "mkv" ]; then
                key=CONFIG_ENABLE_DEMUX_MKV
            elif [ $optval = "mms" ]; then
                key=CONFIG_ENABLE_DEMUX_MMS
            elif [ $optval = "mov" ]; then
                key=CONFIG_ENABLE_DEMUX_MOV
            elif [ $optval = "mpg" ]; then
                key=CONFIG_ENABLE_DEMUX_MPG
            elif [ $optval = "pmp" ]; then
                key=CONFIG_ENABLE_DEMUX_PMP
            elif [ $optval = "ogg" ]; then
                key=CONFIG_ENABLE_DEMUX_OGG
            elif [ $optval = "rx" ]; then
                key=CONFIG_ENABLE_DEMUX_RX
            elif [ $optval = "ts" ]; then
                key=CONFIG_ENABLE_DEMUX_TS
            else
                echo "invalid demux format $optval."
                continue
            fi
            
            if [ "${opt:2:6}" = "enable" ]; then
                value=1
            else
                value=0
            fi
        ;;
        
        ## diable or enable video decoder for specific codec format, 
        ## option can be [mjpeg/mpeg1/mpeg2/mpeg4/msmpeg4v1/msmpeg4v2/divx3/divx4/divx5/xvid/h263/s263/rxg2/wmv1/wmv2/wmv3/vp6/vp8/vp9/rv8/rv9/h264/h265].
        --disable-vdecoder=*|--enable-vdecoder=*)
            key=""
            value=""
            
            if [ ${#optval} -eq 0 ]; then
                echo "invalid video codec format."
                continue
            fi
            
            if [ $optval = "mjpeg" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_MJPEG
            elif [ $optval = "mpeg1" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_MPEG1
            elif [ $optval = "mpeg2" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_MPEG2
            elif [ $optval = "mpeg4" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_MPEG4
            elif [ $optval = "msmpeg4v1" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_MSMPEG4V1
            elif [ $optval = "msmpeg4v2" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_MSMPEG4V2
            elif [ $optval = "divx3" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_DIVX3
            elif [ $optval = "divx4" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_DIVX4
            elif [ $optval = "divx5" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_DIVX5
            elif [ $optval = "xvid" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_XVID
            elif [ $optval = "h263" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_H263
            elif [ $optval = "s263" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_SORENSSON_H263
            elif [ $optval = "rxg2" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_RXG2
            elif [ $optval = "wmv1" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_WMV1
            elif [ $optval = "wmv2" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_WMV2
            elif [ $optval = "wmv3" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_WMV3
            elif [ $optval = "vp6" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_VP6
            elif [ $optval = "vp8" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_VP8
            elif [ $optval = "vp9" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_VP9
            elif [ $optval = "rx" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_RX
            elif [ $optval = "h264" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_H264
            elif [ $optval = "h265" ]; then
                key=CONFIG_ENABLE_VIDEO_DECODER_H265
            else
                echo "invalid video codec format $optval."
                continue
            fi
            
            if [ "${opt:2:6}" = "enable" ]; then
                value=1
            else
                value=0
            fi
        ;;
        ## config cmcc[yes/no].
        --cmcc=*)
            key=CONFIG_CMCC
            value=""
            
            if [ ${optval} = "yes" ]; then
                echo "cmcc yes"
                value=OPTION_CMCC_YES
            elif [ ${optval} = "no" ]; then
                echo "cmcc no"
                value=OPTION_CMCC_NO
            else
                echo "invalid cmcc option $optval."
                continue
            fi
        ;;
        
        ## config is_camera_decoder[yes/no].
        --is_camera_decoder=*)
            key=CONFIG_IS_CAMERA_DECODER
            value=""
            
            if [ ${optval} = "yes" ]; then
                echo "is camera decoder, yes, only compile h264 and mjpegplus decoder"
                value=OPTION_IS_CAMERA_DECODER_YES
            elif [ ${optval} = "no" ]; then
                echo "is camera decoder, no, compile all decoders"
                value=OPTION_IS_CAMERA_DECODER_NO
            else
                echo "invalid is_camera_decoder option $optval."
                continue
            fi
        ;;
        
        *)
            optname="${opt%%=*}"
            optname="${optname#--}"
            echo "error: unknown option $optname, quit"
            exit 0
        ;;
    esac
    
    ## set configuration.
    if [ ${#value} -gt 0 ]; then
        len=${#CONFIGURATIONS[*]}
        for ((j=0; j<len; j=j+2))
        do
            if [ $key = ${CONFIGURATIONS[$j]} ]; then
                CONFIGURATIONS[$((j+1))]=$value
                break;
            fi
        done
    fi
done                 

################################################################################
## write configuration to files.
################################################################################
for myFile in ${configFiles[*]}
do
    if [ ! -f "$myFile" ]; then
        continue
    fi
    
    for ((j=0; j<len; j=j+2))
    do
        key=${CONFIGURATIONS[$j]}
        value=${CONFIGURATIONS[$((j+1))]}
        sed -i "/^#define ${key} /c#define ${key}    ${value}" $myFile
    done
done

################################################################################
## write configuration to config.mk.
################################################################################
myFile="${ROOT_PATH}/config.mk"
if [ ! -f "$myFile" ]; then
    echo "file config.mk not exist, can not write configuration for makefile."
    exit 1
fi

for ((j=0; j<len; j=j+2))
do
    key=${CONFIGURATIONS[$j]}
    value=${CONFIGURATIONS[$((j+1))]}
    sed -i "/^${key} /c${key} = \$\(${value}\)" $myFile
done
   
